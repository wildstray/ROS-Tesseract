#!/usr/bin/env python3
from collections import defaultdict, deque
import curses
import datetime
import itertools
import json
import math
import numpy as np
from ros_api import Api
from ros_api.api import RouterOSTrapError,LoginError,CreateSocketError
from tabulate import tabulate
import time
import threading
from threading import Thread, Event
import traceback
import signal
import sys

MINWIDTH = 70
ROSTIMEOUT = 10

deques = defaultdict(deque)
heights = []
results = defaultdict(list)
quit = Event()
resize = Event()

def textGauge(value, width=50, vmin=0, vmax=100, units=None):
    # Creates a text-bases gauge
    descr = " %d %s" % (value, units)
    stars = int(((width-len(descr)-2)/100.0)*(100.0/(vmax-vmin)*abs(value-vmin)))
    spaces = width-stars-len(descr)-2
    gauge = "[%s%s%s]" % ("*"*stars, " "*spaces, descr)
    return gauge

def textPlot(data, width=50, height=20, vmin=None, vmax=None, samples=60, type="line", units="", format=".1f"):
    # Creates a text-bases line or bars plot

    # Scale settings
    data_min = min(data)
    data_max = max(data)
    if abs(data_max - data_min) < 5:
        data_min = np.mean(data) - abs(np.mean(data)//25)
        data_max = np.mean(data) + abs(np.mean(data)//25)
    if min and max:
        data_min = vmin
        data_max = vmax
    data_range = abs(data_max - data_min)
    y_scale = (height - 1) / data_range
    x_scale = samples / width

    # Create empty plot
    canvas = [[" " for _ in range(width + 6)] for _ in range(height + 2)]

    # Draw axes
    for i in range(height):
        canvas[height - i - 1][5] = "|"
    canvas[height][5] = "+"
    canvas[height][6:] = ["-" for _ in range(width)]

    # Add Y-axis labels
    for i, y in enumerate(range(0, height, height // 5)):
        label = format.format(data_min + i * data_range / 5)
        canvas[height - y - 1][0:len(label)] = label

    if type=="line":
        # Plot interpolated line graph
        x_original = np.linspace(0, len(data) - 1, len(data))
        x_interpolated = np.linspace(0, len(data) - 1, width * 10)
        data_interpolated = np.interp(x_interpolated, x_original, data)
        for i in range(width * 10):
            if int(i / 10 * x_scale) >= len(data):
                continue
            x_idx = int(i / 10)
            y_val = data_interpolated[i]
            y_idx = height - 1 - int((y_val - data_min - 2) * y_scale)
            if 0 <= x_idx < width and 0 <= y_idx < height:
                canvas[y_idx][x_idx + 6] = "*"

    elif type=="bars":
        # Plot bar graph
        for i in range(width):
            x_idx = int(i * x_scale)
            if x_idx >= len(data):
                continue
            y_val = data[x_idx]
            y_height = int((y_val - data_min - 2) * y_scale)
            for j in range(y_height+1):
                y_idx = height - 1 - j
                if 0 <= y_idx < height:
                    canvas[y_idx][i + 6] = "*"

    # Add X-axis label
    canvas[height + 1] = " " * 6 + "Y units: %s last: %s avg: %s stddev: %s X units: seconds" % (units, format.format(data[-1]), format.format(np.mean(data)), format.format(np.std(data)))

    return ["".join(row) for row in canvas]

def gety(column, pos):
    """Get y for box in specified column and position"""
    return sum(list(itertools.chain(*heights))[:pos]) - sum([sum(heights[i]) for i in range(column)])

def geth(pos):
    """Get height of box in specified position"""
    return list(itertools.chain(*heights))[pos]

def getminyx():
    """Get minimum size of terminal required for all configured and enabled boxes"""
    return max([sum(heights[i]) for i in range(len(heights))])+3, len(heights)*MINWIDTH

def sigWinch(signum, frame):
    """SIGWINCH handler: terminal resized"""
    curses.endwin()
    curses.initscr() 
    resize.set()

def sigInt(signum, frame):
    """SIGINT handler."""
    quit.set()

def sigTerm(signum, frame):
    """SIGTERM handler."""
    quit.set()

def exceptionHook(exctype, value, tb):
    """General exception hook."""
    quit.set()
    traceback.print_last()

class poller(Thread):
    """Poller thread."""
    def __init__(self, event, config):
        Thread.__init__(self)
        self.stopped = event
        self.config = config
        self.boxconfig = list(filter(lambda x: x.get('disabled', False) == False, sorted(self.config.get('boxes',[]), key=lambda x: x['column'])))
        try:
            self.router = Api(config.get('ros').get('address'), user=config.get('ros').get('user'), password=config.get('ros').get('password'), 
                timeout=int(config.get('ros').get('timeout',ROSTIMEOUT)), use_ssl=config.get('ros').get('use_ssl',False))
        except CreateSocketError as e:
            print('ERROR: %s' % str(e))
            sys.exit(1)
        except LoginError:
            print('Invalid user name or password!')
            sys.exit(1)
        except AttributeError:
            print('Error or missing parameter in configuration!')
            sys.exit(1)
        try:
            r = self.router.talk(('/system/identity/print'))
        except RouterOSTrapError:
            print ("Error querying RouterOS")
            sys.exit(1)
        self.calcHeights()

    def calcHeights(self):
        """Calculate boxes heights based on user configured boxes height (only enabled boxes) or number of output lines in router response."""
        for pos, item in enumerate(self.boxconfig):
            column = item.get('column')
            if column not in range(len(heights)):
                heights.append([])
            if 'height' in item:
                heights[column].append(item.get('height',0) + item.get('padding',0) + 4)
            else:
                try:
                    r = self.router.talk(tuple(item.get('query')))
                except RouterOSTrapError:
                    print ("Error querying RouterOS")
                    sys.exit(1)
                if r == []:
                    heights[column].append(4)
                    continue
                heights[column].append(len(r[0]) + item.get('padding',0) + 4)

    def run(self):
        """Main router polling loop."""
        while not self.stopped.wait(1):
            for pos, item in enumerate(self.boxconfig):
                try:
                    r = self.router.talk(tuple(item.get('query')))
                    results[pos] = r
                except RouterOSTrapError:
                    pass
                if not self.stopped:
                    break
                if len(r) == 1 and item.get('graph', False):
                    deques[pos].append(float(list(r[0].values())[0]))
                    if len(deques[pos]) > item.get('interval'):
                        deques[pos].popleft()

class GUI(Thread):
    """TUI thread."""
    def __init__(self, event, config, screen):
        Thread.__init__(self)
        self.stopped = event
        self.config = config
        self.stdscr = screen
        self.boxes = defaultdict(list)
        self.boxconfig = list(filter(lambda x: x.get('disabled', False) == False and x.get('column') < self.getmaxcol(), sorted(self.config.get('boxes',[]), key=lambda x: x['column'])))

        """Init curses."""
        self.stdscr.nodelay(True)
        curses.noecho()
        curses.cbreak()
        if curses.has_colors():
            curses.start_color()
            curses.use_default_colors()
        self.stdscr.border(0)
        curses.curs_set(0)

        """Init curses colors."""
        colors = {"COLOR_BLACK": curses.COLOR_BLACK, "COLOR_RED": curses.COLOR_RED, "COLOR_GREEN": curses.COLOR_GREEN, 
                  "COLOR_YELLOW": curses.COLOR_YELLOW, "COLOR_BLUE": curses.COLOR_BLUE, "COLOR_MAGENTA": curses.COLOR_MAGENTA,
                  "COLOR_CYAN": curses.COLOR_CYAN, "COLOR_WHITE": curses.COLOR_WHITE}
        if curses.has_colors():
            for item in config.get('colorpairs',[]):
                curses.init_pair(item.get('pair', 0), colors.get(item.get('fg', curses.COLOR_WHITE)), colors.get(item.get('bg', curses.COLOR_BLACK)))
            self.stdscr.bkgd(curses.color_pair(config.get('color',0)))

    def getmaxcol(self):
        """Get max colums fitting in current terminal."""
        maxy, maxx = self.stdscr.getmaxyx()
        return maxx//(MINWIDTH+2)

    def drawBoxes(self):
        """Draws boxes (that doesn't exceed terminal size)."""
        maxy, maxx = self.stdscr.getmaxyx()
        maxc = self.getmaxcol()
        width = (maxx-2)//maxc
        for pos, item in enumerate(self.boxconfig):
            column = item.get('column',0)
            adj = (maxx-2)%maxc if column & (maxc - 1) else 0
            if self.checkExceed(column, pos):
                continue
            self.boxes[pos] = curses.newwin(geth(pos), width + adj, gety(column, pos) + 1, width * column + 1)
            self.boxes[pos].attron(curses.color_pair(item.get('color',0)))
            self.boxes[pos].box()
            self.boxes[pos].bkgd(' ', curses.color_pair(item.get('color',0)))
            self.boxes[pos].attroff(curses.color_pair(item.get('color',0)))

    def nbsleep(self, duration, check_interval=0.1):
        """Non-blocking sleep that checks for event flags during the sleep duration."""
        elapsed = 0
        while elapsed < duration:
            if resize.is_set() or quit.is_set():
                break
            time.sleep(check_interval)
            elapsed += check_interval

    def warnBox(self, text):
        """Warning box."""
        maxy, maxx = self.stdscr.getmaxyx()
        warn = curses.newwin(7, 38, maxy//2 - 4, maxx//2 - 19)
        warn.attron(curses.color_pair(self.config.get('color',0)))
        warn.box()
        warn.bkgd(' ', curses.color_pair(self.config.get('color',0)))
        warn.addstr(3, 2, text, curses.color_pair(self.config.get('color',0)))
        warn.attroff(curses.color_pair(self.config.get('color',0)))
        self.stdscr.border(0)
        self.stdscr.refresh()
        warn.refresh()
        self.nbsleep(5)

    def checkResize(self):
        """Check if terminal has been resized, show a warning if terminal it's too small for all boxes and prune exceeding boxes."""
        if resize.is_set():
            resize.clear()
            self.stdscr.refresh()
            self.stdscr.clear()
            self.stdscr.nodelay(True)
            miny, minx = getminyx()
            maxy, maxx = self.stdscr.getmaxyx()
            self.stdscr.refresh()
            self.stdscr.bkgd(curses.color_pair(self.config.get('color',0)))
            if miny > maxy or minx > maxx:
                self.warnBox('Warning! Terminal size too small!')
            self.stdscr.clear()
            self.boxconfig = list(filter(lambda x: x.get('disabled', False) == False and x.get('column') < self.getmaxcol(), sorted(self.config.get('boxes',[]), key=lambda x: x['column'])))
            self.drawBoxes()
            self.stdscr.border(0)
            self.stdscr.refresh()
            self.stdscr.nodelay(True)

    def checkExceed(self, column, pos):
        """Check if box exceed terminal size."""
        maxy, maxx = self.stdscr.getmaxyx()
        return (geth(pos) + gety(column, pos) + 1 > maxy - 2)

    def run(self):
        """Main TUI loop."""
        while not self.stopped.wait(1):
            """Check for keypress, if ESC or q."""
            key = self.stdscr.getch()
            if key == ord('q') or key == 27:
                quit.set()
                break
            self.checkResize()
            for pos, item in enumerate(self.boxconfig):
                column = item.get('column',0)
                if self.checkExceed(column, pos):
                    continue
                self.boxes[pos].erase()
                self.boxes[pos].border(0)
                self.boxes[pos].addstr(0, 1, "[ %s ]" % item.get('name'), curses.A_BOLD | curses.color_pair(item.get('color',0)))
                r = results[pos]
                if r == []:
                    continue
                boxh, boxw = self.boxes[pos].getmaxyx()
                if len(r) > 1:
                    """Show box with tabular content, with 2 columns"""
                    r = list(filter(lambda x: x.get('.section') != '0', r))
                    r = list(map(lambda x: dict(filter(lambda item: not item[0].startswith('.'), x.items())), r))
                    table = list(map(lambda x: x.values(), r))
                    headers = r[0].keys()
                    y = 1
                    for line in tabulate(table, headers, tablefmt='plain', preserve_whitespace=True).split('\n'):
                        y += 1
                        if y > boxh - 2:
                            break
                        if y == 2:
                            try:
                                self.boxes[pos].addstr(y, 2, line, curses.A_BOLD | curses.color_pair(item.get('color',0)))
                            except curses.error:
                                pass
                            y += 1
                        else:
                            try:
                                self.boxes[pos].addstr(y, 2, line, curses.color_pair(item.get('color',0)))
                            except curses.error:
                                pass
                else:
                    if item.get('gauge', False):
                        """Show box with a gauge for a single reading"""
                        text = textGauge(float(list(r[0].values())[0]), width=boxw - 4, vmin=item.get('min'), vmax=item.get('max'), units=item.get('units'))
                        self.boxes[pos].addstr(2, 2, text, curses.color_pair(item.get('color',0)))
                    elif item.get('graph', False):
                        """Show box with a plot for a single reading"""
                        lines = textPlot(deques[pos], width=boxw - 14, height=boxh - 6, samples=item.get('interval',60), vmin=item.get('min'), vmax=item.get('max'), units=item.get('units'), type=item.get('type'), format="{:4.0f}")
                        y = 1
                        for line in lines:
                            y += 1
                            if y > boxh - 2:
                                break
                            try:
                                self.boxes[pos].addstr(y, 2, line, curses.color_pair(item.get('color',0)))
                            except curses.error:
                                pass
                    else:
                        """Show box with tabular content, with more then 2 columns"""
                        table = list(map(lambda x: [x, r[0][x]], r[0]))
                        table.append([' '*20])
                        headers = []
                        y = 1
                        for line in tabulate(table, headers, tablefmt='plain', preserve_whitespace=True).split('\n'):
                            y += 1
                            if y > boxh - 2:
                                break
                            try:
                                self.boxes[pos].addstr(y, 2, line, curses.color_pair(item.get('color',0)))
                            except curses.error:
                                pass
                self.boxes[pos].refresh()
            self.statusBar()
            self.stdscr.refresh()

    def statusBar(self):
        """Status bar."""
        maxy, maxx = self.stdscr.getmaxyx()
        self.stdscr.addstr(maxy - 2, 1, " " * (maxx - 2), curses.color_pair(self.config.get('color',0)) | curses.A_BOLD | curses.A_REVERSE)
        self.stdscr.addstr(maxy - 2, 1, "MONITORING %s (%s)" % (self.config.get('ros').get('address'), self.config.get('ros').get('user')), curses.color_pair(self.config.get('color',0)) | curses.A_BOLD | curses.A_REVERSE)
        term = "TERMINAL %dx%d" % (maxx, maxy)
        self.stdscr.addstr(maxy - 2, maxx//2-len(term)//2 - 1, term, curses.color_pair(self.config.get('color',0)) | curses.A_BOLD | curses.A_REVERSE)
        dt = datetime.datetime.today().strftime('%x %X')
        self.stdscr.addstr(maxy - 2, maxx - len(dt) - 1, "%s" % dt, curses.color_pair(self.config.get('color',0)) | curses.A_BOLD | curses.A_REVERSE)

def main(screen):
    """main() curses wrapped."""
    cfgfile = "%s.json" % sys.argv[0]
    if len(sys.argv) > 1:
        cfgfile = sys.argv[1]

    """read configuration file."""
    with open(cfgfile) as f:
        try:
            config = json.load(f)
        except json.decoder.JSONDecodeError:
            print('Error in configuration format!')
            sys.exit(1)
        finally:
            f.close()

    if not 'boxes' in config:
        print('Please configure some monitor box!')
        sys.exit(1)

    """init hooks for excetions and signals."""
    sys.excepthook = exceptionHook
    signal.signal(signal.SIGWINCH, sigWinch)
    signal.signal(signal.SIGINT, sigInt)
    signal.signal(signal.SIGTERM, sigTerm)

    """init and starts threads for GUI and poller."""
    tPoller = poller(quit, config)
    tGUI = GUI(quit, config, screen)
    resize.set()
    tPoller.start()
    tGUI.start()
    tPoller.join()
    tGUI.join()

if __name__ == '__main__':
    curses.wrapper(main)
